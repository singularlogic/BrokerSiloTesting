/**
 * Broker@Cloud Verification and Testing Tool Suite.
 * Copyright (C) 2015 Anthony J H Simons and Raluca Lefticaru, 
 * University of Sheffield, UK.  All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 * 
 * This file is "foreground software", developed as an output of 
 * the European Union collaborative research project, "Broker@Cloud: 
 * enabling continuous quality assurance and optimization in future 
 * enterprise cloud service brokers", FP7-ICT-2011-8 no. 318392, and
 * is licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
 * implied.  See the License for the specific language governing 
 * permissions and limitations under the License.
 * 
 * The freedoms granted by the License to incorporate, redistribute,
 * modify or extend the software apply only to "foreground software"
 * contributed by the Broker@Cloud project; and not to any proprietary 
 * software, or "background software" incorporated from other sources, 
 * which may be offered under different terms of usage.
 * 
 * Please contact the Department of Computer Science, University of
 * Sheffield, Regent Court, 211 Portobello, Sheffield S1 4DP, UK or
 * visit www.sheffield.ac.uk/dcs if you need additional information 
 * or have any questions.
 */

package uk.ac.sheffield.vtts.model;

import java.util.ArrayList;
import java.util.List;

/**
 * Notice is the ancestor of different notice, analysis and warning messages.
 * A Notice represents meta-data to be communicated to the user along with
 * data generated by a process.  Notice has two subclasses, Analysis and
 * Warning, which have identical behaviour, but which are named differently
 * to indicate different levels of severity.  A plain Notice just represents
 * information, an unmarked notification of something.  A Notice may contain
 * further subsidary Notice, Analysis and Warning nodes.  A Notice may
 * contain arbitrary model Elements, described by the Notice.
 *   
 * @author Anthony J H Simons
 * @version Broker@Cloud 1.0
 */
public class Notice extends Element {

	/**
	 * A short text string indicating the text.
	 */
	protected  String text;
	/**
	 * The Annotations attached to this Notice.
	 */
	protected List<Notice> notices;
	
	/**
	 * A list of arbitrary Elements described by this Notice.
	 */
	protected List<Element> elements;
	
	/**
	 * Creates an empty Notice.
	 */
	public Notice() {
	}
	
	/**
	 * Creates a Notice with the given text.
	 * @param text the text.
	 */
	public Notice(String text) {
		this.text = text;
	}
	
	/**
	 * Sets the text of this Notice.
	 * @param text the text.
	 * @return this Notice.
	 */
	public Notice setText(String text) {
		this.text = text;
		return this;
	}
	
	/**
	 * Returns the text of this Notice.
	 * @return the text.
	 */
	public String getText() {
		return text;
	}

	/**
	 * Adds a subsidiary Notice to this Notice node.  Creates a list to store
	 * the Notices, when the first Notice is added.
	 * @param note the subsidiary Notice to add.
	 * @return this Notice.
	 */
	public Notice addNotice(Notice note) {
		if (notices == null)
			notices = new ArrayList<Notice>();
		notices.add(note);
		return this;
	}

	/**
	 * Returns the list of subsidiary Notices under this Notice, if any.
	 * Returns null, if no subsidiary Notices were added.
	 * @return a list of Notices, or null.
	 */
	public List<Notice> getNotices() {
		return notices;
	}

	/**
	 * Adds a model Element to the list described by this Notice.  Creates a
	 * list to store the Elements, when the first Element is added.
	 * @param element the Element to add.
	 * @return this Notice.
	 */
	public Notice addElement(Element element) {
		if (elements == null)
			elements = new ArrayList<Element>();
		elements.add(element);
		return this;
	}

	/**
	 * Returns the list of Elements described by this Notice, if any.
	 * Returns null, if no Elements were added.
	 * @return the list of related Elements, or null.
	 */
	public List<Element> getElements() {
		return elements;
	}

}
